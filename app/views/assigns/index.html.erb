<%= render partial: "/projects/project_header"%>
<%= render partial: "/projects/project_buttons" %> 
<%= render partial: "/projects/project_tab" %>

<div class="ui bottom attached active tab segment">
  <% if @documents.empty? || @users.empty? %>
    <div class="ui message info">
      <% if @documents.empty? && @users.empty? %>
        Please upload documents and add annotators in the project first.
      <% elsif @documents.empty? %>
        Please upload documents in 'Documents' tab.
      <% else %>
        Please add annotators in 'Member' tab.
      <% end %>
    </div>
  <% else %>
    <div class="ui  right aligned grid">
      <div class="page-info left floated left aligned eight wide column">
        <% if @project.round_begin? %>
          <div class='ui message warning'><i class='icon exclamation triangle'></i> You cannot change assignments after a round begins</div>
        <% end %>
      </div>
      <div class="right floated right aligned eight wide column">
        <button class='ui button primary disabled save-button'>Save</button>
        <button class='ui button olive disabled upload-button'>Upload</button>
        <button class='ui button teal disabled assign-randomly-button'>Random Assign</button>
        <button class='ui button red disabled clear-assigns-button'>Clear All</button>
      </div>
    </div>
    <div class="ui warning message need-save-message" style='display:none' >
      <i class="close icon"></i>
      Click 'Save' button to confirm your changes
    </div>
    <ul class='footnote'>
      <li>By clicking a circle in a cell, you can assign or unassign a document to an annotator.</li>
    </ul>
    <table class="ui table table-bordered celled assign-table">
      <thead>
        <tr>
          <th>Doc ID</th>
          <th>Title</th>
          <% @users.each do |user|%>
            <th style='text-align:center;'>          
              <%=image_tag(user.image_or_default, class: "ui avatar image", data: {content: user.name_and_email}) %>
            </th>
          <% end %>
          <th style='text-align:center;'>#</th>
        </tr>
      </thead>

      <tbody>
        <% 
          popup_msg = if @project.round_begin? then "cannot change" else "click to change" end
          @documents.each do |document| %>
          <tr class='assign-row' data-did='<%=document.id%>'>
            <td><%= link_to document.did, document %></td>
            <td class="ellipsis w300"><%=document.title %></td>
            <% @users.each do |user|%>
              <td style='text-align:center;'>          
                <%
                assign_task =  @assigns_map["#{document.id}-#{user.id}"]
                cls = 'not-assigned'
                if assign_task.present?
                  cls = if assign_task.done then 'done assigned' else 'assigned' end
                end
                state = if assign_task.present? then 'on' else 'off' end
                %>
                <div class='assign-button <%= cls%> need-popup' data-did='<%=document.id%>' data-uid='<%=user.id%>' data-aid='<%=assign_task.id if assign_task.present? %>' data-state='<%=state%>' data-content='<%= popup_msg %>' >
                  <i class='icon check circle'></i>
                  <i class='circle outline icon'></i>
                  <i class='icon circle'></i>
                </div>
              </td>
            <% end %>
            <td data-did='<%=document.id%>' class='sum row'>0</td>
          </tr>
        <% end %>
      </tbody>
      <tfoot>
        <th colspan=2 class='sum'><%=@documents.size%> documents</th>
        <% @users.each do |user| %>
          <th data-uid='<%=user.id%>' class='sum col'>0</th>
        <% end %>
        <th class='sum total'>0</th>
      </tfoot>
    </table>
    <ul class='footnote'>
      <li>By clicking a circle in a cell, you can assign or unassign a document to an annotator.</li>
    </ul>
  <br>
  <% end %>
</div>

<div class="ui modal" id="uploadModal">
  <i class="close icon"></i>
  <div class="header">
    Upload Preassigned Annotator File
  </div>
  <div class="content">
    <div>
      Check the sample file below for data format 
      <ul>
        <li>
          <%=link_to download_project_assigns_path(@project) do %>
            <i class="download icon"></i> Sample Assign File
          <% end %>
        </li>
      </ul>
    </div>

    <%= form_tag(upload_project_assigns_path(@project), method: "POST", multipart: true, id: "uploadFileForm", class:"ui form") do %>
      <div class="field">
        <input type="file" name="file">
      </div>
    <% end %>
  </div>
  <div class="actions">
    <div class="ui deny button">
      Cancel
    </div>
    <div class="ui positive button">
      Upload
    </div>
  </div>
</div>
<script>
<%= content_for :defer_js do -%>
<% if !@documents.empty? && !@users.empty? %>
  var dirtyFlag = false;
  $(function() {
    $('.ui.avatar.image').popup();

    $('.assign-button').click(function(e) {
      <% if @project.round_begin? %>

      <% else %>
        toggleButton(e.currentTarget);
        recalculateSum();
      <% end %>
    });
    $('.clear-assigns-button').click(clearAssign);
    $('.upload-button').click(function() {
      $('#uploadModal').modal({
        onApprove: function() {
          $("#uploadFileForm").submit();
        }
      }).modal('show');
    });
    $('.assign-randomly-button').click(assignRandomly);
    $('.save-button').click(save);
    recalculateSum();
    $(window).on('beforeunload', function(){
      if (dirtyFlag) {
        return "Are you sure you want to discard the changes?";
      }
    });
    <% if @project.status == "preparing" %>
      $('.upload-button').removeClass('disabled');
      $('.assign-randomly-button').removeClass('disabled');
    <% end %>
    clearDirty();
  });

  function toggleButton(e) {
      var $e = $(e);
      var state = $e.data('state') || 'off';

      if (state == 'off') {
        $e.data('state', 'on');
        $e.removeClass('not-assigned').addClass('assigned');
      } else {
    <% if @project.status != "preparing" %>
        if (confirm('Are you sure to unassign existing task?')) {
    <% end %>
          $e.data('state', 'off');
          $e.removeClass('assigned').addClass('not-assigned');
    <% if @project.status != "preparing" %>
        }
    <% end %>
      }
      makeDirty();
  }

  function makeDirty() {
    dirtyFlag = true;
    $('.need-save-message').show();
    $('.save-button').removeClass('disabled');
  }

  function clearDirty() {
    dirtyFlag = false;
    $('.need-save-message').hide();
    $('.save-button').addClass('disabled');
  }

  function recalculateSum() {
    var sum = 0;
    _.each($('.assign-row'), function(e) {
      var $e = $(e);
      var did = $e.data('did');
      var cnt = $e.find('.assign-button.assigned').length;
      var doneCnt = $e.find('.assign-button.done').length;
      $e.toggleClass('done', cnt > 0 && cnt == doneCnt);
      $e.find('.sum.row').text(cnt);
      sum += cnt;
    });

    _.each($('.sum.col'), function(e) {
      var uid = $(e).data('uid');
      var cnt = $('.assign-button.assigned[data-uid='+uid+']').length;
      $(e).text(cnt);
    });
    <% if @project.status == "preparing" %>
      $('.clear-assigns-button').toggleClass('disabled', sum == 0)
    <% end %>
    $('.sum.total').text(sum);
  }

  function clearAssign() {
    if (confirm("Are you sure to clear all?")) {
      $('.assign-button').removeClass('assigned').addClass('not-assigned').data('state', 'off');
      recalculateSum();
      makeDirty();
    }
  }

  function assignRandomly() {
    var cntUser = $('.sum.col').length;
    var cntDoc = $('.sum.row').length;
    var perDoc = parseInt(prompt('How many annotators do you want to assign per a document (1 to ' + cntUser + ')?'), "Title");
    var perUser = Math.ceil(perDoc * cntDoc / cntUser);

    if (!(perDoc >=1 && perDoc <= cntUser)) {
      alert('Please enter number between 1 to ' + cntUser);
      return;
    }
    $('#main-loader').addClass('active');
    $('#main-loader .text.loader').text('Assigning...');
    setTimeout(function() {
      $('.assign-button').removeClass('assigned').addClass('not-assigned').data('state', 'off');
      var docsPerUsers = _.map($('.sum.col'), function(e) {
        var uid = $(e).data('uid');
        var cnt = $('.assign-button.assigned[data-uid='+uid+']').length;
        return {id: uid, cnt: cnt};
      });

      _.each($('.sum.row'), function(e) {
        var $tr = $(e.closest('tr'));
        var freeUsers = $tr.find('.assign-button.not-assigned');
        var freeUserMap = {}, freeUserIds = [];
        _.each(freeUsers, function(u) {
          var id = $(u).data('uid');
          freeUserMap[id] = u;
          freeUserIds.push(id);
        })
        var availableUsers = _.filter(docsPerUsers, function(u) {
          return freeUserIds.includes(u.id);
        });
        availableUsers.sort(function(a, b) { return a.cnt - b.cnt;});

        var remains = perDoc - (cntUser - freeUsers.length);
        while(remains > 0 && availableUsers.length > 0) {
          var minimumCnt = availableUsers[0].cnt;
          var candidates = _.map(_.filter(availableUsers, function(u) { return u.cnt == minimumCnt;}), function(e) {return e.id});
          candidates = _.shuffle(candidates);
          while(remains > 0 && candidates.length > 0) {
            var id = candidates.pop();
            toggleButton(freeUserMap[id]);
            var docPerUser = docsPerUsers.find(function(e) {return e.id == id;});
            docPerUser && docPerUser.cnt++;
            var availableUsers = _.filter(availableUsers, function(e) {return e.id != id;});
            remains--;
          }
        }
      });
      recalculateSum();
      makeDirty();
      $('#main-loader').removeClass('active');
      $('#main-loader .text.loader').text('Loading...');
    }, 1);


  }

  function save() {
    var url = '<%= project_assigns_path(@project, format: 'json') %>';
    var data = _.map($('.assign-button.assigned'), function(e) {
      return $(e).data('did') + '-' + $(e).data('uid');
    });
    $('#main-loader').addClass('active');
    $('#main-loader .text.loader').text('Saving...');

    $.ajax({
      method: 'POST',
      url: url, 
      data: {list: data},
      beforeSend: function(xhr) {
        xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
        // xhr.setRequestHeader('Content-Type', 'application/json');
      },
      success: function(data) {
        toastr.success('Successfully updated.');
        clearDirty();
        $("#projectButtonArea").load("<%= buttons_project_path(@project, format: 'html') %>", function() {
          $('#projectButtonArea .dropdown').dropdown();
        });
        update_project_tab_header(data.project);
      },
      error: function(err) {
        console.error(err);
        toastr.error(err.responseText || err); 
      }, 
      complete: function() {
        $('#main-loader .text.loader').text('Loading...');
        $('#main-loader').removeClass('active');
      }
    });
  }
<% end %>
<%- end -%>
</script>
